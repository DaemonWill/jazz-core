#!groovy.

node  {
 //echo sh(returnStdout: true, script: 'env')
 
 def gitlab_credentialsId 	= env.REPO_CREDENTIAL_ID
 def gitlab_repo_base	    = env.REPO_BASE
 def gitlab_repo_url        = "http://" + gitlab_repo_base + "/" + env.REPO_LOC + "/"

 def jenkins_username  = env.JENKINS_USERNAME
 def jenkins_password  = env.JENKINS_PASSWORD

 def gitlab_repo_name  = env.gitlabSourceRepoName
 def gitlab_branch     = env.gitlabBranch
 def service_type = ''
 def service_name = ''
 def domain_name  = ''
 
 echo "gitlab_credentialsId:gitlab_credentialsId"               
 echo "gitlab_repo_url:$gitlab_repo_url"	
 echo "gitlab_repo_name:$gitlab_repo_name"
 echo "gitlab_branch:$gitlab_branch"
 
 try{
        sh 'rm -rf $gitlab_repo_name*'
    	dir(gitlab_repo_name)
    	{
    		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: gitlab_credentialsId, url: gitlab_repo_url + gitlab_repo_name + '.git']]])
    	   
    	   //Find the service type	
    	   if (fileExists('build.api')) {
				service_type = "api"
    	   } else if(fileExists('build.lambda')) {
				service_type = "lambda"
    	   } else if(fileExists('build.website')) {
				service_type = "website"
    	   }

            //Read the JenkinsFile to find the service name and domain
             def jenkinsfile_dir = sh (
    			script: "pwd" ,
    			returnStdout: true
    		).trim()
            myFileName = jenkinsfile_dir + "/Jenkinsfile"
            
            //Read the Jenkins File
            def curl_cmd = ''
            if(fileExists(myFileName)) {
                def result = readFile(myFileName).trim()
    	        def resultList = result.tokenize("\n")
            	for (i in resultList) {
            		if(i.trim().toLowerCase().startsWith("sh \"curl")) {
            		    curl_cmd = i.trim().substring(3)
            	   	}
            	}//for
    	        
                echo "curl:$curl_cmd"
                def cmd_split = curl_cmd.split('&')
                for (s in cmd_split) {
            		if(s.trim().toLowerCase().startsWith("service_name")) {
            		    service_name=s.split('=')[1]
            	   	} else if(s.trim().toLowerCase().startsWith("domain")) {
            		    domain_name=s.split('=')[1]
            	   	}
            	}//for
            }//if
    	}
    
    	sh 'rm -rf $gitlab_repo_name*'
    }
    catch(error){
    	//do nothing
    	echo "Error Occured.."
    }
    
    //Get the Build URL
    if (service_type == 'api'){
        build_job = env.API_BUILD_URI_DEV
        if ( gitlab_branch == 'master') {
            build_job = env.API_BUILD_URI
        }
    }else if(service_type == 'website') {
        build_job = env.WEBSITE_BUILD_URI_DEV
        if ( gitlab_branch == 'master') {
            build_job = env.WEBSITE_BUILD_URI
        }
        
        //Add scm_project as cas
        build_job = build_job + "&scm_project=cas"
     } else if (service_type == 'lambda' || service_type == 'function'){
        build_job = env.LAMBDA_BUILD_URI_DEV
        if ( gitlab_branch == 'master') {
            build_job = env.LAMBDA_BUILD_URI 
        }
    }

    echo "service_type:$service_type"
    echo "build_job:$build_job"
    echo "domain_name:$domain_name"
    echo "service_name:$service_name"
                
    def job_url = JenkinsLocationConfiguration.get().getUrl() + build_job
    echo "job_url:$job_url"
 
    if ( service_type != '' && service_name != '' && domain_name != '') { 
        echo "Call the build job"
        sh "curl -X GET -k -v -u \"$jenkins_username:$jenkins_password\"  \"" + job_url + "&service_name=$service_name&domain=$domain_name&scm_branch=$gitlab_branch\""
     }
     else
     {
        echo "Error:ServiceType or ServiceName or DomainName is empty"
     }
}